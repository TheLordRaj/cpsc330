Traceback (most recent call last):
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/kvarada/opt/miniconda3/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
knn = KNeighborsRegressor()
knn.fit(X_train, y_train)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn [32], line 2[0m
[1;32m      1[0m knn [38;5;241m=[39m KNeighborsRegressor()
[0;32m----> 2[0m [43mknn[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mX_train[49m[43m,[49m[43m [49m[43my_train[49m[43m)[49m

File [0;32m~/opt/miniconda3/envs/cpsc330/lib/python3.10/site-packages/sklearn/neighbors/_regression.py:210[0m, in [0;36mKNeighborsRegressor.fit[0;34m(self, X, y)[0m
[1;32m    191[0m [38;5;124;03m"""Fit the k-nearest neighbors regressor from the training dataset.[39;00m
[1;32m    192[0m 
[1;32m    193[0m [38;5;124;03mParameters[39;00m
[0;32m   (...)[0m
[1;32m    206[0m [38;5;124;03m    The fitted k-nearest neighbors regressor.[39;00m
[1;32m    207[0m [38;5;124;03m"""[39;00m
[1;32m    208[0m [38;5;28mself[39m[38;5;241m.[39mweights [38;5;241m=[39m _check_weights([38;5;28mself[39m[38;5;241m.[39mweights)
[0;32m--> 210[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_fit[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m)[49m

File [0;32m~/opt/miniconda3/envs/cpsc330/lib/python3.10/site-packages/sklearn/neighbors/_base.py:407[0m, in [0;36mNeighborsBase._fit[0;34m(self, X, y)[0m
[1;32m    405[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_get_tags()[[38;5;124m"[39m[38;5;124mrequires_y[39m[38;5;124m"[39m]:
[1;32m    406[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(X, (KDTree, BallTree, NeighborsBase)):
[0;32m--> 407[0m         X, y [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_data[49m[43m([49m
[1;32m    408[0m [43m            [49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mmulti_output[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43morder[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mC[39;49m[38;5;124;43m"[39;49m
[1;32m    409[0m [43m        [49m[43m)[49m
[1;32m    411[0m     [38;5;28;01mif[39;00m is_classifier([38;5;28mself[39m):
[1;32m    412[0m         [38;5;66;03m# Classification targets require a specific format[39;00m
[1;32m    413[0m         [38;5;28;01mif[39;00m y[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m1[39m [38;5;129;01mor[39;00m y[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m2[39m [38;5;129;01mand[39;00m y[38;5;241m.[39mshape[[38;5;241m1[39m] [38;5;241m==[39m [38;5;241m1[39m:

File [0;32m~/opt/miniconda3/envs/cpsc330/lib/python3.10/site-packages/sklearn/base.py:596[0m, in [0;36mBaseEstimator._validate_data[0;34m(self, X, y, reset, validate_separately, **check_params)[0m
[1;32m    594[0m         y [38;5;241m=[39m check_array(y, input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124my[39m[38;5;124m"[39m, [38;5;241m*[39m[38;5;241m*[39mcheck_y_params)
[1;32m    595[0m     [38;5;28;01melse[39;00m:
[0;32m--> 596[0m         X, y [38;5;241m=[39m [43mcheck_X_y[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mcheck_params[49m[43m)[49m
[1;32m    597[0m     out [38;5;241m=[39m X, y
[1;32m    599[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m no_val_X [38;5;129;01mand[39;00m check_params[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mensure_2d[39m[38;5;124m"[39m, [38;5;28;01mTrue[39;00m):

File [0;32m~/opt/miniconda3/envs/cpsc330/lib/python3.10/site-packages/sklearn/utils/validation.py:1074[0m, in [0;36mcheck_X_y[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[1;32m   1069[0m         estimator_name [38;5;241m=[39m _check_estimator_name(estimator)
[1;32m   1070[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1071[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mestimator_name[38;5;132;01m}[39;00m[38;5;124m requires y to be passed, but the target y is None[39m[38;5;124m"[39m
[1;32m   1072[0m     )
[0;32m-> 1074[0m X [38;5;241m=[39m [43mcheck_array[49m[43m([49m
[1;32m   1075[0m [43m    [49m[43mX[49m[43m,[49m
[1;32m   1076[0m [43m    [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[43maccept_sparse[49m[43m,[49m
[1;32m   1077[0m [43m    [49m[43maccept_large_sparse[49m[38;5;241;43m=[39;49m[43maccept_large_sparse[49m[43m,[49m
[1;32m   1078[0m [43m    [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m
[1;32m   1079[0m [43m    [49m[43morder[49m[38;5;241;43m=[39;49m[43morder[49m[43m,[49m
[1;32m   1080[0m [43m    [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[1;32m   1081[0m [43m    [49m[43mforce_all_finite[49m[38;5;241;43m=[39;49m[43mforce_all_finite[49m[43m,[49m
[1;32m   1082[0m [43m    [49m[43mensure_2d[49m[38;5;241;43m=[39;49m[43mensure_2d[49m[43m,[49m
[1;32m   1083[0m [43m    [49m[43mallow_nd[49m[38;5;241;43m=[39;49m[43mallow_nd[49m[43m,[49m
[1;32m   1084[0m [43m    [49m[43mensure_min_samples[49m[38;5;241;43m=[39;49m[43mensure_min_samples[49m[43m,[49m
[1;32m   1085[0m [43m    [49m[43mensure_min_features[49m[38;5;241;43m=[39;49m[43mensure_min_features[49m[43m,[49m
[1;32m   1086[0m [43m    [49m[43mestimator[49m[38;5;241;43m=[39;49m[43mestimator[49m[43m,[49m
[1;32m   1087[0m [43m    [49m[43minput_name[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mX[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m   1088[0m [43m[49m[43m)[49m
[1;32m   1090[0m y [38;5;241m=[39m _check_y(y, multi_output[38;5;241m=[39mmulti_output, y_numeric[38;5;241m=[39my_numeric, estimator[38;5;241m=[39mestimator)
[1;32m   1092[0m check_consistent_length(X, y)

File [0;32m~/opt/miniconda3/envs/cpsc330/lib/python3.10/site-packages/sklearn/utils/validation.py:899[0m, in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)[0m
[1;32m    893[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    894[0m             [38;5;124m"[39m[38;5;124mFound array with dim [39m[38;5;132;01m%d[39;00m[38;5;124m. [39m[38;5;132;01m%s[39;00m[38;5;124m expected <= 2.[39m[38;5;124m"[39m
[1;32m    895[0m             [38;5;241m%[39m (array[38;5;241m.[39mndim, estimator_name)
[1;32m    896[0m         )
[1;32m    898[0m     [38;5;28;01mif[39;00m force_all_finite:
[0;32m--> 899[0m         [43m_assert_all_finite[49m[43m([49m
[1;32m    900[0m [43m            [49m[43marray[49m[43m,[49m
[1;32m    901[0m [43m            [49m[43minput_name[49m[38;5;241;43m=[39;49m[43minput_name[49m[43m,[49m
[1;32m    902[0m [43m            [49m[43mestimator_name[49m[38;5;241;43m=[39;49m[43mestimator_name[49m[43m,[49m
[1;32m    903[0m [43m            [49m[43mallow_nan[49m[38;5;241;43m=[39;49m[43mforce_all_finite[49m[43m [49m[38;5;241;43m==[39;49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mallow-nan[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    904[0m [43m        [49m[43m)[49m
[1;32m    906[0m [38;5;28;01mif[39;00m ensure_min_samples [38;5;241m>[39m [38;5;241m0[39m:
[1;32m    907[0m     n_samples [38;5;241m=[39m _num_samples(array)

File [0;32m~/opt/miniconda3/envs/cpsc330/lib/python3.10/site-packages/sklearn/utils/validation.py:146[0m, in [0;36m_assert_all_finite[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)[0m
[1;32m    124[0m         [38;5;28;01mif[39;00m (
[1;32m    125[0m             [38;5;129;01mnot[39;00m allow_nan
[1;32m    126[0m             [38;5;129;01mand[39;00m estimator_name
[0;32m   (...)[0m
[1;32m    130[0m             [38;5;66;03m# Improve the error message on how to handle missing values in[39;00m
[1;32m    131[0m             [38;5;66;03m# scikit-learn.[39;00m
[1;32m    132[0m             msg_err [38;5;241m+[39m[38;5;241m=[39m (
[1;32m    133[0m                 [38;5;124mf[39m[38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mestimator_name[38;5;132;01m}[39;00m[38;5;124m does not accept missing values[39m[38;5;124m"[39m
[1;32m    134[0m                 [38;5;124m"[39m[38;5;124m encoded as NaN natively. For supervised learning, you might want[39m[38;5;124m"[39m
[0;32m   (...)[0m
[1;32m    144[0m                 [38;5;124m"[39m[38;5;124m#estimators-that-handle-nan-values[39m[38;5;124m"[39m
[1;32m    145[0m             )
[0;32m--> 146[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg_err)
[1;32m    148[0m [38;5;66;03m# for object dtype data, we only check for NaNs (GH-13254)[39;00m
[1;32m    149[0m [38;5;28;01melif[39;00m X[38;5;241m.[39mdtype [38;5;241m==[39m np[38;5;241m.[39mdtype([38;5;124m"[39m[38;5;124mobject[39m[38;5;124m"[39m) [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m allow_nan:

[0;31mValueError[0m: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values
ValueError: Input X contains NaN.
KNeighborsRegressor does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

